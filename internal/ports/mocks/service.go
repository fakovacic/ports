// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/ports/internal/ports"
	"sync"
)

// Ensure, that ServiceMock does implement ports.Service.
// If this is not the case, regenerate this file with moq.
var _ ports.Service = &ServiceMock{}

// ServiceMock is a mock implementation of ports.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked ports.Service
// 		mockedService := &ServiceMock{
// 			CreateFunc: func(contextMoqParam context.Context, port *ports.Port) (*ports.Port, error) {
// 				panic("mock out the Create method")
// 			},
// 			UpdateFunc: func(contextMoqParam context.Context, s string, port *ports.Port) (*ports.Port, error) {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedService in code that requires ports.Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(contextMoqParam context.Context, port *ports.Port) (*ports.Port, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(contextMoqParam context.Context, s string, port *ports.Port) (*ports.Port, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Port is the port argument value.
			Port *ports.Port
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Port is the port argument value.
			Port *ports.Port
		}
	}
	lockCreate sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(contextMoqParam context.Context, port *ports.Port) (*ports.Port, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Port            *ports.Port
	}{
		ContextMoqParam: contextMoqParam,
		Port:            port,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(contextMoqParam, port)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	ContextMoqParam context.Context
	Port            *ports.Port
} {
	var calls []struct {
		ContextMoqParam context.Context
		Port            *ports.Port
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceMock) Update(contextMoqParam context.Context, s string, port *ports.Port) (*ports.Port, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceMock.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Port            *ports.Port
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Port:            port,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(contextMoqParam, s, port)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *ServiceMock) UpdateCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Port            *ports.Port
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Port            *ports.Port
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
